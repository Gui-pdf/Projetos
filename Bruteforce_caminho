import itertools

matriz_distancias = {
    'A': {'B': 3, 'C': 8, 'D': 4, 'E': 7},
    'B': {'A': 3, 'C': 10, 'D': 9, 'E': 2},
    'C': {'A': 8, 'B': 10, 'C': 0, 'E': 5},
    'D': {'A': 4, 'B': 9, 'D': 0, 'E': 1},
    'E': {'A': 7, 'B': 2, 'C': 5, 'D': 1, 'E': 0}
}


def Distancia(caminho, grafo):
    anterior = 0
    distancia = 0
    for vertice in caminho:
        if anterior and not vertice in grafo[anterior]:
            distancia = float('inf')
            break
        distancia += anterior and grafo[anterior][vertice]
        anterior = vertice
    return distancia


def caixeiro_viajante(inicio, grafo, fim = 0):
    rotas_meio = list(grafo)
    rotas_meio.remove(inicio)
    rotas_totais = []
    for rota in itertools.permutations(rotas_meio):
        rota_final = [inicio]
        rota_final.extend(list(rota))
        if not fim or inicio == fim:
            rota_final.append(inicio)
        else:
            while rota_final[-1] != fim:
                rota_final.pop()
        distancia_final = Distancia(rota_final, grafo)
        if not distancia_final == float('inf') and not tuple((distancia_final,rota_final)) in rotas_totais:
            rotas_totais.append(tuple((distancia_final,rota_final)))
    rotas_totais.sort()
    print(rotas_totais)


caixeiro_viajante('A', matriz_distancias, 'B')
